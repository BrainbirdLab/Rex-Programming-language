mod main;

import "core:fmt";
import { readFile, writeFile } from "core:io";

import "code:array";

const x : i8 = 5;
let a := 2;
let b := 10;

let myName := "John";

a = -10 + 5 - b;

if a == 4 {
    let a := 10;
    b = a + 3;
}

struct Person {
    pub name: str;
    pub readonly age: i8; // readonly field. Can't be changed after initialization
}

impl Person {
    fn walk() {
        print("Walking");
    }
    fn talk() {
        print("Talking");
    }
}

// A trait is a collection of methods that can be implemented by any type.
trait SuperPower {
    fn fly();
    fn invisibility();
}
// Implementing the trait for the struct
impl SuperPower for Person {
    fn fly() {
        print("Flying");
    }
    fn invisibility() {
        print("Invisible");
    }
}


struct Boss{
    // Embedding the Person struct in the Boss struct. 
    // All fields and methods of Person are now available in Boss
    embed Person;
    pub readonly salary: i32;
}

let p : Person = Person { name: "John", age: 23 };

p.age = 24;
p.walk();
p.talk();




for i := 0; i < 10; ++i {
    print(i);
}

let array := [1, 2, 3, 4, 5];

foreach arr, i in array {
    // i is the index
    // arr is the value on each iteration
}

foreach val in array where val % 2 == 0 {
    // val is the values that are even
    
    //similar to,
    if val % 2 != 0 {
        continue;
    }
}


fn mul(a: i8, b: i8) -> i8 {
    ret a * b;
}

fn square(a: i8) -> i8 {
    ret mul(a, a);
}

square(5);