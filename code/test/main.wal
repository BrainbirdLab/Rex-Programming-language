// Variable declaration with auto type inference
let a := 1;
let b := 2;
let c := a + b;

a = 20 + b; // b is available in the global scope

b += 10; // add 10 with b and assign the value to it

// function declaration
fn add(a: f32, b: f32) -> f32 {
    let c := 4.5;
    ret a + b + c;
}

const PI : f32 = 3.14159265359;
let x := 's';
let num : f32 = 10.00;


struct Color {
    pub name: str;
    pub r: f32;
    pub g: f32;
    pub b: f32;
    priv a: f32;
}

let red := Color { name: "red", r: 1.0, g: 0.0, b: 0.0, a: 1.0};

//num += red.r;

red.r = 0.5;
let sum := add(1.3, red.r);

fn NewColor(name: str, r: f32, g: f32, b: f32) -> Color {
    ret Color { name: name, r: r, g: g, b: b, a: 1.0};
}

let green := NewColor("green", 0.0, 1.0, 0.0);

green.g;

green.a; // Error: a is private